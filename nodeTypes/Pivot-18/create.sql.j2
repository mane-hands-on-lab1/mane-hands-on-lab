{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : PIVOT NODE == #}
{# == Node Type Description    : This node transforms a narrow table to wider table.It is particularly useful when you want to convert unique row values from one column into multiple columns in the output, aggregating data in the process == #}
{#Release date:20250107 Version:1.0.0#}

{% if desiredState == currentState %}

{{ stage('Nothing to do.') }}
select 1 = 0

{% elif desiredState == undefined %}

    {# Table or View Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
    
    {% if currentState.node.materializationType == 'view' %}

     {{ stage('Drop Table or View', true, "sql", "drop") }}
     DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% else %}
     
       {{ stage('Drop ' + currentState.node.materializationType , true, "sql", "drop") }}
       DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% endif %}

{% elif currentState == undefined or (currentState != undefined and desiredState != currentState) %} 

              {%if currentState != defined %}
              {%if currentState.node.materializationType != desiredState.node.materializationType %}

                     {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}

                     {% if currentState.node.materializationType == 'view' %} 
                      DROP {{currentState.node.materializationType}} IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                     {% else %}
                      DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                     {% endif %}
                {%endif%}
                {%endif%}

         {% set source = desiredState.sources[0] %}
         {%- set ns = namespace(keycol = "",pcolumn = [],saggfunctions=[],mggfunctions=[],funcdesc='',filcolval =[],cnt =1,i=0,exclclause =[],fexclclause ="",filcol =[]) %}


     {# Infer Pivot true #}
     {%if desiredState.config.inferPivot == true %}
			          {%set ns.keycol = desiredState.config.tabKeyColumn.get('items') | map(attribute='keyColDropdown.name') | list|first%}
                  {%set ns.pcolumn = desiredState.config.tabValueColumn.get('items') | map(attribute='valColDropdown.name') | list%}
      {%else%}
			         {%set ns.keycol = desiredState.config.tabKeyColumn.get('items') | map(attribute='keyColTextBox') | list|first%}
                  {%set ns.pcolumn = desiredState.config.tabValueColumn.get('items') | map(attribute='valColTextBox')|list%}
      {%endif%}



      {%if desiredState.config.sincol == true %}

        {% set ns.saggfunctions = desiredState.config.aggfunc1.get('items') | map(attribute='funcname1') | list%}
         
         {# List of columns to be excluded from Pivot query#}

         {%if desiredState.config.exlcol == true %}

            {% set exclcol = desiredState.config.exlcol.get('items') | map(attribute='exclcol1.name') | list%} 

            {%for col in exclcol%}
              {%set ns.exclclause = ns.exclclause + ['"'+col+'"'] %}
            {%endfor%}
            {%set ns.fexclclause = 'EXCLUDE('+ ns.exclclause | join(',') + ')' %}
         {%endif%}

         
        {{ stage('Create Pivot '+ desiredState.node.materializationType) }}

            CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              AS
             ( {%for func in ns.saggfunctions%}
               {%if func == 'SUM'%} 
                 {%set ns.funcdesc = "TOTAL "+ ns.pcolumn|first %}
               {%elif func == 'AVG'%}
                 {%set ns.funcdesc = "AVERAGE "+ ns.pcolumn|first%}
               {%elif func == 'MAX'%}
                 {%set ns.funcdesc = "MAXIMUM "+ ns.pcolumn|first%}
               {%elif func == 'MIN'%}
                 {%set ns.funcdesc = "MINIMUM "+ ns.pcolumn|first%}
               {%elif func == 'COUNT'%}
                 {%set ns.funcdesc = "COUNT OF "+ ns.pcolumn|first%}
                {%endif%}
                SELECT * FROM (SELECT {%if ns.saggfunctions | length >1 %}'{{ns.funcdesc}}' AS aggregate ,{%endif%} *  {%if ns.fexclclause != "" %} {{ ns.fexclclause}} {%endif%}
                 {{ source.join }} )
              PIVOT({{func}}({{ns.pcolumn|first}}) FOR {{ns.keycol}} IN ( {%if desiredState.config.subqueryval1 !="" %}
                 {{desiredState.config.subqueryval1}}
                {%elif desiredState.config.Colvol1 != "" %}
                   {{desiredState.config.Colvol1}}  
                {%else%}
                ANY ORDER BY {{ns.keycol}}
                {%endif%})
                {%if desiredState.config.defvalue == true%} DEFAULT ON NULL ({{desiredState.config.defaultval}}) {%endif%}
                ) 
                {%- if not loop.last -%} UNION {% endif %}
                {%endfor%}
                )
        {%else %}
        
           {# Multiple Pivot Columns#}
            {% set ns.mggfunctions = desiredState.config.aggfunc.get('items') | map(attribute='funcname') | list%}
                  
           {#Filter column list#}
              
           {%if desiredState.config.samKeyColval == true%} 
               {%for col in ns.pcolumn%}
                  {%set ns.filcol = ns.filcol + [desiredState.config.Colvol1] %}
               {%endfor%}

            {%else%}
                {%set ns.filcol = desiredState.config.tabValueColumn.get('items') | map(attribute='Colvol') | list%}
            {%endif%}
            
           {# Filter columns need to be explicitly specified for Multiple Pivot Columns#}
                           
            {{ stage('Create Pivot '+ desiredState.node.materializationType) }}             
              
              
            CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              AS
             ( 
                SELECT 
                {%for func in ns.mggfunctions %}
                       {%for val1 in ns.filcol[ns.i].split(',') %}
                        {% set val = val1.strip() %}
                      {{func}}(${{ns.cnt}}) AS {{func}}_{{val.replace("'", "")}}_{{ns.pcolumn[ns.i]}}
                      {%set ns.cnt = ns.cnt +1%}
                      {%if not loop.last %},{%endif%}
				           {%endfor%}
                   {%set ns.i = ns.i+1%}
                   {%if not loop.last%},{%endif%}
                {%endfor%}
                 FROM
              (SELECT
              {%for col in ns.pcolumn%}
                 {{col}},
                 {{ns.keycol}} AS {{ns.keycol}}_{{col}}
                 {%if not loop.last%},{%endif%}
              {%endfor%}
              {{ source.join }})
              {%for col in ns.pcolumn%} 
                PIVOT({{ns.mggfunctions[loop.index0]}}({{col}}) FOR {{ns.keycol}}_{{col}} IN ( 
                {%if ns.filcol[loop.index0] != None %}
                   {{ns.filcol[loop.index0]}}  
                {%else%}
                   ANY ORDER BY {{ns.keycol}}
                {%endif%}){%if desiredState.config.defvalue == true%} DEFAULT ON NULL ({{desiredState.config.defaultval}}) {%endif%})
			      {%endfor%}
                )
         
        {%endif%}
{%- else -%}

{{ stage('Nothing to do.') }}
select 1 = 0

{% endif %}
